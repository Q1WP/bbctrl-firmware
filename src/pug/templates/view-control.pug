//-/////////////////////////////////////////////////////////////////////////////
//-                                                                           //
//-               This file is part of the Buildbotics firmware.              //
//-                                                                           //
//-      Copyright (c) 2015 - 2021, Buildbotics LLC, All rights reserved.     //
//-                                                                           //
//-       This Source describes Open Hardware and is licensed under the       //
//-                               CERN-OHL-S v2.                              //
//-                                                                           //
//-       You may redistribute and modify this Source and make products       //
//-  using it under the terms of the CERN-OHL-S v2 (https:/cern.ch/cern-ohl). //
//-         This Source is distributed WITHOUT ANY EXPRESS OR IMPLIED         //
//-  WARRANTY, INCLUDING OF MERCHANTABILITY, SATISFACTORY QUALITY AND FITNESS //
//-   FOR A PARTICULAR PURPOSE. Please see the CERN-OHL-S v2 for applicable   //
//-                                conditions.                                //
//-                                                                           //
//-              Source location: https://github.com/buildbotics              //
//-                                                                           //
//-    As per CERN-OHL-S v2 section 4, should You produce hardware based on   //
//-  these sources, You must maintain the Source Location clearly visible on  //
//-  the external case of the CNC Controller or other product you make using  //
//-                                this Source.                               //
//-                                                                           //
//-              For more information, email info@buildbotics.com             //
//-                                                                           //
//-/////////////////////////////////////////////////////////////////////////////

script#view-control-template(type="text/x-template")
  #control
    table.axes
      tr(:class="axes.klass")
        th.name Axis
        th.position Position
        th.absolute Absolute
        th.offset Offset
        th.state State
        th.actions
          button.pure-button(:disabled="!can_set_axis",
            title="Zero all axis offsets.", @click="zero()") &empty;

          button.pure-button(title="Home all axes.", @click="home()",
            :disabled="!is_idle")
            .fa.fa-home

      each axis in 'xyzabc'
        tr.axis(:class=`${axis}.klass`, v-if=`${axis}.enabled`,
          :title=`${axis}.title`)
          th.name= axis
          td.position: unit-value(:value=`${axis}.pos`, precision=4)
          td.absolute: unit-value(:value=`${axis}.abs`, precision=3)
          td.offset: unit-value(:value=`${axis}.off`, precision=3)
          td.state
            .fa(:class=`'fa-' + ${axis}.icon`)
            | {{#{axis}.state}}

          th.actions
            button.pure-button(:disabled="!can_set_axis",
              title=`Set {{'${axis}' | upper}} axis position.`,
              @click=`show_set_position('${axis}')`)
              .fa.fa-cog

            button.pure-button(:disabled="!can_set_axis",
              title=`Zero {{'${axis}' | upper}} axis offset.`,
              @click=`zero('${axis}')`) &empty;

            button.pure-button(:disabled="!is_idle", @click=`home('${axis}')`,
              title=`Home {{'${axis}' | upper}} axis.`)
              .fa.fa-home

            message(:show.sync=`position_msg['${axis}']`)
              h3(slot="header") Set {{'#{axis}' | upper}} axis position

              div(slot="body")
                .pure-form
                  .pure-control-group
                    label Position
                    input(v-model="axis_position",
                      @keyup.enter=`set_position('${axis}', axis_position)`)
                p

              div(slot="footer")
                button.pure-button(@click=`position_msg['${axis}'] = false`)
                  | Cancel

                button.pure-button(v-if=`${axis}.homed`,
                  @click=`unhome('${axis}')`) Unhome

                button.pure-button.button-success(
                  @click=`set_position('${axis}', axis_position)`) Set


            message(:show.sync=`manual_home['${axis}']`)
              h3(slot="header") Manually home {{'#{axis}' | upper}} axis

              div(slot="body")
                p Set axis absolute position.

                .pure-form
                  .pure-control-group
                    label Absolute
                    input(v-model="axis_position",
                      @keyup.enter=`set_home('${axis}', axis_position)`)

                p

              div(slot="footer")
                button.pure-button(@click=`manual_home['${axis}'] = false`)
                  | Cancel

                button.pure-button.button-success(
                  title=`Home {{'${axis}' | upper}} axis.`,
                  @click=`set_home('${axis}', axis_position)`) Set

    .macros
      button.pure-button.macro(v-for="macro in config.macros",
        v-if="macro.path", @click="run_macro($index + 1)",
        :title="'Run macro ' + ($index + 1) + ' ' + macro.name + '\n' + macro.path",
        :style="{'background-color': macro.color}")
        | {{($index + 1) + ' ' + macro.name}}

      button.pure-button.macro(@click="goto('#settings:macros')",
        title="Go to macro settings")
        .fa.fa-cog
        | Macros

    .info-blocks
      table.info
        tr
          th State
          td(:class="{attention: highlight_state}") {{mach_state}}

        tr
          th Message
          td.message(:class="{attention: highlight_state}")
            | {{message.replace(/^#/, '')}}

        tr(title="Active machine units")
          th Units
          td.mach_units {{mach_units}}

        tr(title="Active tool")
          th Tool
          td {{state.tool || 0}}

      table.info
        tr(
          title="Velocity in {{metric ? 'meters' : 'inches'}} per minute")
          th Velocity
          td
            unit-value(:value="state.v", precision="2", unit="", iunit="",
              scale="0.0254")
            | {{metric ? ' m/min' : ' IPM'}}

        tr(title="Programmed feed rate.")
          th Feed
          td
            unit-value(:value="state.feed", precision="2", unit="", iunit="")
            | {{metric ? ' mm/min' : ' IPM'}}

        tr(title="Programed and actual speed.")
          th Speed
          td
            | {{state.speed || 0 | fixed 0}}
            span(v-if="!isNaN(state.s)") &nbsp;({{state.s | fixed 0}})
            = ' RPM'

      table.info
        tr
          th Remaining
          td(title="Total run time (days:hours:mins:secs)").
            #[span(v-if="remaining") {{remaining | time}} of]
            {{total_time | time}}
        tr
          th ETA
          td.eta {{eta}}
        tr
          th Line
          td
            | {{0 <= state.line ? state.line : 0 | number}}
            span(v-if="state.lines")
              | &nbsp;of {{state.lines | number}}
        tr
          th {{this.simulating ? 'Simulating' : 'Progress'}}
          td.progress
            label {{(progress || 0) | percent}}
            .bar(:style="'width:' + (progress || 0) * 100 + '%'")

    .override(title="Feed rate override.")
      label Feed
      input(type="range", min="0", max="2", step="0.01",
        v-model="feed_override", @change="override_feed")
      span.percent {{feed_override | percent 0}}

    .override(title="Spindle speed override.")
      label Speed
      input(type="range", min="0", max="2", step="0.01",
        v-model="speed_override", @change="override_speed")
      span.percent {{speed_override | percent 0}}

    .tabs
      input#tab1(type="radio", name="tabs" checked, @click="tab = 'auto'")
      label(for="tab1", title="Run GCode programs") Auto

      input#tab2(type="radio", name="tabs", @click="tab = 'mdi'")
      label(for="tab2", title="Manual GCode entry") MDI

      input#tab3(type="radio", name="tabs", @click="tab = 'jog'")
      label(for="tab3", "Jog the axes manually") Jog

      input#tab4(type="radio", name="tabs", @click="tab = 'messages'")
      label(for="tab4") Messages

      input#tab5(type="radio", name="tabs", @click="tab = 'indicators'")
      label(for="tab5") Indicators

      input#tab6(type="radio", name="tabs", @click="tab = 'power'")
      label(for="tab6") Power

      section#content1.tab-content.pure-form
        .toolbar.pure-control-group
          button.pure-button(:class="{'attention': is_holding}",
            title="{{is_running ? 'Pause' : 'Start'}} program.",
            @click="start_pause", :disabled="!state.queued").
            #[.fa(:class="is_running ? 'fa-pause' : 'fa-play'")]
            {{is_running ? 'Pause' : 'Run'}}

          button.pure-button(title="Stop program.", @click="stop").
            #[.fa.fa-stop] Stop


          button.pure-button(title="Pause program at next optional stop (M1).",
            @click="optional_pause", v-if="false").
            #[.fa.fa-stop-circle-o] Optional Pause

          button.pure-button(title="Execute one program step.", @click="step",
            :disabled="(!is_ready && !is_holding) || !state.queued",
            v-if="false").
            #[.fa.fa-step-forward] Step

          button.pure-button(title="Select a program.", @click="open",
            :disabled="!is_ready").
            #[.fa.fa-folder-open] Open

          button.pure-button(title="Edit program.", @click="edit",
            :disabled="!state.queued").
            #[.fa.fa-pencil] Edit

          button.pure-button(title="Open 3D view.", @click="view",
            v-if="$root.webGLSupported", :disabled="!state.queued").
            #[.fa.fa-eye] View

          .filename {{filename}}

        textarea.gcode-view(v-el:gcode-view)

      section#content2.tab-content
        .mdi.pure-form(title="Manual GCode entry.")
          button.pure-button(:disabled="!can_mdi",
            :class="{'attention': is_holding}",
            title="{{is_running ? 'Pause' : 'Start'}} command.",
            @click="mdi_start_pause")
            .fa(:class="is_running ? 'fa-pause' : 'fa-play'")

          button.pure-button(title="Stop command.", @click="stop")
            .fa.fa-stop

          input(v-model="mdi", :disabled="!can_mdi", @keyup.enter="submit_mdi")

        .history(:class="{placeholder: !history}")
          span(v-if="!history.length") MDI history displays here.
          ul
            li(v-for="item in history", @click="load_history($index)",
               track-by="$index")
              | {{item}}

      section#content3.tab-content
        .jog
          axis-control(axes="XY", :colors="['red', 'green']",
            :enabled="[x.enabled, y.enabled]",
            v-if="x.enabled || y.enabled", :adjust="jog_adjust",
            :step="jog_step")

          axis-control(axes="AZ", :colors="['orange', 'blue']",
            :enabled="[a.enabled, z.enabled]",
            v-if="a.enabled || z.enabled", :adjust="jog_adjust",
            :step="jog_step")

          axis-control(axes="BC", :colors="['cyan', 'purple']",
            :enabled="[b.enabled, c.enabled]",
            v-if="b.enabled || c.enabled", :adjust="jog_adjust",
            :step="jog_step")

          .jog-settings
            .jog-adjust
              | Fine adjust
              input(type="range", v-model="jog_adjust", min=0, max=2, step=1,
                list="jog-adjust-ticks")
              datalist#jog-adjust-ticks
                option(value="0")
                option(value="1")
                option(value="2")

            .jog-mode
              | Step mode
              input(type="checkbox", v-model="jog_step")

          .jog-instructions(v-if="jog_step")
            p Left click the axes above to jog by the specified amount.

          .jog-instructions(v-else)
            p.
              Left click the axes above holding down the mouse button to jog the
              machine.
            p Jogging speed is set by the ring that is clicked.

      section#content4.tab-content
        console

      section#content5.tab-content
        indicators(:state="state", :template="template")

      section#content6.tab-content
        power(:state="state", :template="template")
